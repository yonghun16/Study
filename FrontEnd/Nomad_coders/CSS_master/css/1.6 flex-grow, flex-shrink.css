/* 1.6 flex-grow, flex-shrink */

body {
}

.father {
  display: flex;
  /* Main Axis */
  justify-content: space-around;
  align-content: center;
  /* Cross Axis */
  height: 150vh;
  flex-wrap: wrap;      /* child에게 크기를 유지하라고 명령함 */
  flex-wrap: nowrap;
}

.child {
  width: 300px;
  height: 200px;
  background: Peru;
  color: White;
  font-size: 3em;
  display: flex;
  justify-content: center;
  align-items: center;
}

.child:nth-child(2) {
  background: #000;
  flex-shrink: 2;   /* 다른 노드들 보다 2배 더 찌그러진다. (축소 할 때) */
  flex-grow: 2;     /* 다른 노드들 보다 여백의 공간을 사용하여 2/3 만큼 넓어진다. */
}

.child:nth-child(3) {
  flex-grow: 1;     /* 다른 노드들 보다 여백의 공간을 사용하여 1/3 만큼 넓어진다. */
}

/*
1) flex-shrink: flexbox가 쥐어짤 때, element의 행동의 정의함 
ex) flex-wrap: nowrap일때, 화면이 작아지면 width가 설정되어있어도 줄어들지. 
- flex-shrink: 1; - flex-shrink: n(정수); --> 여러 개 element 중 특정 element만 덜 줄어들거나, 더 줄어들게 할 수 있음!! 

2) flex-grow: shrink와 반대, 화면이 늘어남에 따라 box 크기가 얼마나 늘어날까? 
- flex-grow: 1; - flex-grow: 0; - 남아있는 공간을 가져옴 (space를 없애고) 
-> 즉, 남아있는 공간, 여백이 있을 때만 grow 가능 
=> 화면이 커질 때, element도 함께 커지길 원할 때 사용할 수 있음
=> flex-grow property가 0인 상태거나, 따로 정의되지 않았다면, 화면이 커져도 각 element 크기가 커지지 않음 
(여백만 늘어나게 됨)
*/ 
